---
title: Managing Service Brokers
---

This document describes how to use the [go-based v6 CLI](https://github.com/cloudfoundry/cli) to manage a Cloud Foundry [Service Broker](index.html). Service Brokers implement the [Service Broker API](api.html). 

Once you've implemented the [Catalog endpoint](api.html#catalog-mgmt), you'll want to verify your services and plans are available to end users. Two steps are required: 

1. [Register a Broker](#register-broker)
2. [Make Plans Public](access-control.html#make-plans-public)

In order to run any of the commands below, you must be authenticated with Cloud Foundry as an admin user.

## <a id='register-broker'></a>Register a Broker ##

Registering a broker causes cloud controller to fetch and validate the catalog from your broker, and save the catalog to cloud controller database. The basic auth username and password which are provided when adding a broker are encrypted in cloud controller database, and used by the cloud controller to authenticate with the broker when making all API calls. Your service broker should validate the username and password sent in every request, otherwise anyone could curl your broker to delete service instances.

<pre class="terminal">
$ cf create-service-broker mybrokername someuser somethingsecure http://mybroker.example.com/
</pre>

### <a id='making-plans-public'></a>Make Plans Public ###
New service plans are private by default. To make plans available to end users, see [Make Plans Public](access-control.html#make-plans-public). Instances of a private plan can not be provisioned until either the plan is made public or is made available to an organization.

### <a id='multiple-brokers'></a>Multiple Brokers, Services, Plans ###

Many service brokers may be added to a Cloud Foundry instance, each offering many services and plans. The following constraints should be kept in mind:

- It's not possible to have multiple brokers with the same name
- It's not possible to have multiple brokers with the same base URL
- The service id and plan ids of each service advertised by the broker must be unique across Cloud Foundry (GUIDs are recommended for these fields)

See [Possible Errors](#possible-errors) below for error messages and what do to when you see them.

## <a id='list-brokers'></a> List Service Brokers ##

<pre class="terminal">
$ cf service-brokers
Getting service brokers as admin...
OK

Name            URL
my-service-name http://mybroker.example.com
</pre>

## <a id='update-broker'></a>Update a Broker ##

Updating a broker is how to ingest changes a broker author has made into Cloud Foundry. Similar to adding a broker, update causes cloud controller to fetch the catalog from a broker, validate it, and update the cloud controller database with any changes found in the catalog.

Update also provides a means to change the basic auth credentials cloud controller uses to authenticate with a broker, as well as the base URL of the broker's API endpoints.

<pre class="terminal">
$ cf update-service-broker mybrokername someuser somethingsecure http://mybroker.example.com/
</pre>

## <a id='rename-broker'></a>Rename a Broker ##

A service broker can be renamed with the following command. This name is used only by the Cloud Foundry operator to identify brokers, and has no relation to configuration of the broker itself.

<pre class="terminal">
$ cf update-service-broker mybrokername mynewbrokername
</pre>

## <a id='remove-broker'></a>Remove a Broker ##

Attempting to remove a service broker will fail if there are service instances for any service plan in the catalog. When planning to shut down or delete a broker, make sure that you remove all service instances before you shut it down. Failure to do so will leave [orphaned service instances](api.html#orphans).

<pre class="terminal">
$ cf delete-service-broker mybrokername
</pre>

## <a id='possible-errors'></a>Possible Errors ##

If  incorrect basic auth credentials are provided:

<pre class="terminal">
Server error, status code: 500, error code: 10001, message: Authentication failed for the service broker API. Double-check that the username and password are correct: http://github-broker.a1-app.cf-app.com/v2/catalog
</pre>

If you receive the following errors, check your broker logs. You may have an internal error.

<pre class="terminal">
Server error, status code: 500, error code: 10001, message: The service broker response was not understood

Server error, status code: 500, error code: 10001, message: The service broker API returned an error from http://github-broker.a1-app.cf-app.com/v2/catalog: 404 Not Found

Server error, status code: 500, error code: 10001, message: The service broker API returned an error from http://github-broker.primo.cf-app.com/v2/catalog: 500 Internal Server Error
</pre>

If your broker's catalog of services and plans violates validation of presence, uniqueness, and type, you will receive meaningful errors. 

<pre class="terminal">
Server error, status code: 502, error code: 270012, message: Service broker catalog is invalid:
Service service-name-1
  service id must be unique
  service description is required
  service "bindable" field must be a boolean, but has value "true"
  Plan plan-name-1
    plan metadata must be a hash, but has value [{"bullets"=>["bullet1", "bullet2"]}]
</pre>
